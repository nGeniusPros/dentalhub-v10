import React, { useState, useEffect } from 'react';
import { supabase } from '../../config/auth';
import { Button } from '../ui/button';
import * as Icons from 'lucide-react';

// Types for knowledge base entries
interface KnowledgeEntry {
  id: string;
  content: string;
  metadata: {
    title: string;
    category: string;
    bundle?: string;
    agents?: string[];
    fileType?: string;
    fileSize?: string;
  };
  created_at: string;
}

// Types for knowledge bundles
interface KnowledgeBundle {
  id: string;
  name: string;
  description?: string;
}

/**
 * Knowledge Base Manager Component
 * 
 * Provides a simple interface for managing knowledge base entries:
 * - View existing entries
 * - Add new entries
 * - Bundle entries together
 * - Assign entries to specific agents
 */
const KnowledgeBaseManager: React.FC = () => {
  // State for knowledge entries and bundles
  const [entries, setEntries] = useState<KnowledgeEntry[]>([]);
  const [bundles, setBundles] = useState<KnowledgeBundle[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // State for the new entry form
  const [newEntry, setNewEntry] = useState({
    title: '',
    content: '',
    category: '',
    bundle: '',
    agents: [] as string[]
  });
  
  // State for the bundle form
  const [newBundle, setNewBundle] = useState({
    name: '',
    description: ''
  });
  
  // UI state
  const [showAddEntryForm, setShowAddEntryForm] = useState(false);
  const [showAddBundleForm, setShowAddBundleForm] = useState(false);
  const [selectedEntry, setSelectedEntry] = useState<string | null>(null);
  
  // List of available agents
  const availableAgents = [
    { id: 'head-brain', name: 'Head Brain Consultant' },
    { id: 'data-retrieval', name: 'Data Retrieval Agent' },
    { id: 'data-analysis', name: 'Data Analysis Agent' },
    { id: 'recommendation', name: 'Recommendation Agent' },
    { id: 'lab-case-manager', name: 'Lab Case Manager Agent' }
  ];

  // Fetch knowledge entries and bundles on component mount
  useEffect(() => {
    fetchEntries();
    fetchBundles();
  }, []);

  // Fetch knowledge entries from Supabase
  const fetchEntries = async () => {
    try {
      setIsLoading(true);
      const { data, error } = await supabase
        .from('knowledge_base')
        .select('id, content, metadata, created_at')
        .order('created_at', { ascending: false });

      if (error) throw error;
      setEntries(data || []);
    } catch (err) {
      console.error('Error fetching knowledge entries:', err);
      setError('Failed to load knowledge base entries');
    } finally {
      setIsLoading(false);
    }
  };

  // Fetch knowledge bundles from Supabase
  const fetchBundles = async () => {
    try {
      const { data, error } = await supabase
        .from('knowledge_bundles')
        .select('*')
        .order('name');

      if (error) throw error;
      setBundles(data || []);
    } catch (err) {
      console.error('Error fetching bundles:', err);
      // Don't set error here to avoid blocking the UI if only bundles fail to load
    }
  };

  // Handle form input changes for new entry
  const handleEntryChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setNewEntry(prev => ({ ...prev, [name]: value }));
  };

  // Handle agent checkbox changes
  const handleAgentChange = (agentId: string) => {
    setNewEntry(prev => {
      const updatedAgents = prev.agents.includes(agentId)
        ? prev.agents.filter(id => id !== agentId)
        : [...prev.agents, agentId];
      
      return { ...prev, agents: updatedAgents };
    });
  };

  // Handle form input changes for new bundle
  const handleBundleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setNewBundle(prev => ({ ...prev, [name]: value }));
  };

  // Add new knowledge entry
  const addEntry = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setIsLoading(true);
      
      // Create metadata object
      const metadata = {
        title: newEntry.title,
        category: newEntry.category,
        bundle: newEntry.bundle || null,
        agents: newEntry.agents,
        fileType: 'text',
        fileSize: `${Math.round(newEntry.content.length / 1024)}K`
      };
      
      // Insert into Supabase
      const { error } = await supabase.from('knowledge_base').insert([
        { 
          content: newEntry.content,
          metadata,
          embedding: null // Will be generated by database function
        }
      ]);

      if (error) throw error;
      
      // Reset form and refresh entries
      setNewEntry({
        title: '',
        content: '',
        category: '',
        bundle: '',
        agents: []
      });
      setShowAddEntryForm(false);
      
      // Trigger database function to generate embedding
      await supabase.rpc('generate_embeddings');
      
      // Refresh entries
      fetchEntries();
      
    } catch (err) {
      console.error('Error adding knowledge entry:', err);
      setError('Failed to add entry to knowledge base');
    } finally {
      setIsLoading(false);
    }
  };

  // Add new bundle
  const addBundle = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setIsLoading(true);
      
      // Insert into Supabase
      const { error } = await supabase.from('knowledge_bundles').insert([
        { 
          name: newBundle.name,
          description: newBundle.description
        }
      ]);

      if (error) throw error;
      
      // Reset form and refresh bundles
      setNewBundle({
        name: '',
        description: ''
      });
      setShowAddBundleForm(false);
      
      // Refresh bundles
      fetchBundles();
      
    } catch (err) {
      console.error('Error adding bundle:', err);
      setError('Failed to add knowledge bundle');
    } finally {
      setIsLoading(false);
    }
  };

  // Delete knowledge entry
  const deleteEntry = async (id: string) => {
    try {
      setIsLoading(true);
      
      const { error } = await supabase
        .from('knowledge_base')
        .delete()
        .eq('id', id);

      if (error) throw error;
      
      // Refresh entries
      fetchEntries();
      
    } catch (err) {
      console.error('Error deleting knowledge entry:', err);
      setError('Failed to delete entry from knowledge base');
    } finally {
      setIsLoading(false);
    }
  };

  // Format date to readable string
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
  };

  // Get bundle name by ID
  const getBundleName = (bundleId: string) => {
    const bundle = bundles.find(b => b.id === bundleId);
    return bundle ? bundle.name : 'None';
  };

  // Get agent names by IDs
  const getAgentNames = (agentIds: string[]) => {
    return agentIds.map(id => {
      const agent = availableAgents.find(a => a.id === id);
      return agent ? agent.name : id;
    }).join(', ');
  };

  return (
    <div className="bg-white rounded-lg shadow overflow-hidden">
      <div className="p-6">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold text-gray-800">Knowledge Base Manager</h1>
          <div className="flex space-x-2">
            <Button 
              onClick={() => setShowAddBundleForm(true)}
              className="flex items-center"
            >
              <Icons.FolderPlus className="w-4 h-4 mr-2" />
              New Bundle
            </Button>
            <Button 
              onClick={() => setShowAddEntryForm(true)}
              className="flex items-center"
            >
              <Icons.FilePlus className="w-4 h-4 mr-2" />
              Add Entry
            </Button>
          </div>
        </div>

        {error && (
          <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6">
            <p>{error}</p>
            <button 
              onClick={() => setError(null)}
              className="text-sm underline"
            >
              Dismiss
            </button>
          </div>
        )}

        {/* Add Entry Form */}
        {showAddEntryForm && (
          <div className="bg-gray-50 p-6 rounded-lg mb-6 border border-gray-200">
            <h2 className="text-lg font-semibold mb-4">Add Knowledge Entry</h2>
            <form onSubmit={addEntry}>
              <div className="grid grid-cols-1 gap-4 mb-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Title
                  </label>
                  <input
                    type="text"
                    name="title"
                    value={newEntry.title}
                    onChange={handleEntryChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    required
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Content
                  </label>
                  <textarea
                    name="content"
                    value={newEntry.content}
                    onChange={handleEntryChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    rows={6}
                    required
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Category
                  </label>
                  <input
                    type="text"
                    name="category"
                    value={newEntry.category}
                    onChange={handleEntryChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Bundle (Optional)
                  </label>
                  <select
                    name="bundle"
                    value={newEntry.bundle}
                    onChange={handleEntryChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md"
                  >
                    <option value="">No Bundle</option>
                    {bundles.map(bundle => (
                      <option key={bundle.id} value={bundle.id}>
                        {bundle.name}
                      </option>
                    ))}
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Accessible by Agents
                  </label>
                  <div className="grid grid-cols-2 gap-2">
                    {availableAgents.map(agent => (
                      <div key={agent.id} className="flex items-center">
                        <input
                          type="checkbox"
                          id={`agent-${agent.id}`}
                          checked={newEntry.agents.includes(agent.id)}
                          onChange={() => handleAgentChange(agent.id)}
                          className="mr-2"
                        />
                        <label htmlFor={`agent-${agent.id}`} className="text-sm">
                          {agent.name}
                        </label>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
              
              <div className="flex justify-end space-x-2">
                <Button 
                  type="button"
                  variant="secondary"
                  onClick={() => setShowAddEntryForm(false)}
                >
                  Cancel
                </Button>
                <Button 
                  type="submit"
                  disabled={isLoading}
                >
                  {isLoading ? 'Adding...' : 'Add Entry'}
                </Button>
              </div>
            </form>
          </div>
        )}

        {/* Add Bundle Form */}
        {showAddBundleForm && (
          <div className="bg-gray-50 p-6 rounded-lg mb-6 border border-gray-200">
            <h2 className="text-lg font-semibold mb-4">Create Knowledge Bundle</h2>
            <form onSubmit={addBundle}>
              <div className="grid grid-cols-1 gap-4 mb-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Bundle Name
                  </label>
                  <input
                    type="text"
                    name="name"
                    value={newBundle.name}
                    onChange={handleBundleChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    required
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Description (Optional)
                  </label>
                  <textarea
                    name="description"
                    value={newBundle.description}
                    onChange={handleBundleChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    rows={2}
                  />
                </div>
              </div>
              
              <div className="flex justify-end space-x-2">
                <Button 
                  type="button"
                  variant="secondary"
                  onClick={() => setShowAddBundleForm(false)}
                >
                  Cancel
                </Button>
                <Button 
                  type="submit"
                  disabled={isLoading}
                >
                  {isLoading ? 'Creating...' : 'Create Bundle'}
                </Button>
              </div>
            </form>
          </div>
        )}

        {/* Knowledge Entries Table */}
        <div className="bg-white rounded-lg overflow-hidden border border-gray-200">
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Title
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Category
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Bundle
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Agents
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Date Added
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              
              <tbody className="bg-white divide-y divide-gray-200">
                {isLoading ? (
                  <tr>
                    <td colSpan={6} className="px-6 py-4 text-center text-sm text-gray-500">
                      Loading entries...
                    </td>
                  </tr>
                ) : entries.length === 0 ? (
                  <tr>
                    <td colSpan={6} className="px-6 py-4 text-center text-sm text-gray-500">
                      No knowledge entries found. Add some to get started.
                    </td>
                  </tr>
                ) : (
                  entries.map(entry => (
                    <tr 
                      key={entry.id}
                      className={selectedEntry === entry.id ? 'bg-blue-50' : 'hover:bg-gray-50'}
                      onClick={() => setSelectedEntry(entry.id === selectedEntry ? null : entry.id)}
                    >
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                        {entry.metadata.title}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {entry.metadata.category || '—'}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {entry.metadata.bundle ? getBundleName(entry.metadata.bundle) : '—'}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {entry.metadata.agents?.length ? getAgentNames(entry.metadata.agents) : 'All Agents'}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {formatDate(entry.created_at)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            if (confirm('Are you sure you want to delete this entry?')) {
                              deleteEntry(entry.id);
                            }
                          }}
                          className="text-red-600 hover:text-red-900 mr-4"
                        >
                          Delete
                        </button>
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>
        </div>

        {/* Detail View */}
        {selectedEntry && entries.find(e => e.id === selectedEntry) && (
          <div className="mt-6 p-6 bg-gray-50 rounded-lg border border-gray-200">
            <h2 className="text-lg font-semibold mb-2">
              {entries.find(e => e.id === selectedEntry)?.metadata.title}
            </h2>
            <div className="mb-4 text-sm text-gray-500 flex space-x-4">
              <span>
                <strong>Category:</strong> {entries.find(e => e.id === selectedEntry)?.metadata.category || '—'}
              </span>
              <span>
                <strong>Bundle:</strong> {
                  entries.find(e => e.id === selectedEntry)?.metadata.bundle 
                    ? getBundleName(entries.find(e => e.id === selectedEntry)?.metadata.bundle || '') 
                    : '—'
                }
              </span>
              <span>
                <strong>Added:</strong> {formatDate(entries.find(e => e.id === selectedEntry)?.created_at || '')}
              </span>
            </div>
            <div className="bg-white p-4 rounded border border-gray-200 whitespace-pre-wrap">
              {entries.find(e => e.id === selectedEntry)?.content}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default KnowledgeBaseManager;